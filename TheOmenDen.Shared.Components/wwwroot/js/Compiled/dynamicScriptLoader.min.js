export class ScriptLoader{_loadedScripts=new Set;_targetElement;constructor(){this._targetElement=document.head}async loadScript(n,t={}){const r=t.maxRetries||3,u=t.retryInterval||25;if(this.isScriptLoaded(n,t.id)){this.logOutResult("Script Already Loaded");return}let i=0;while(i<=r)try{await this.loadScriptAttempt(n,t);return}catch(f){if(i>=r){this.logOutError("Script Failed To Load after retries");throw f;}i++;this.logOutError(`Script Failed To Load. Retrying... (${i}/${r})`);await new Promise(n=>setTimeout(n,u))}}async loadScriptAttempt(n,t){return new Promise((i,r)=>{const u=document.createElement("script");u.src=n;u.onload=()=>{this._loadedScripts.add(n+(t.id||"")),this.logOutResult("Script Loaded successfully"),i()};u.onerror=()=>{r(new Error("Script failed to load"))};this.setScriptAttributes(u,t);const f=this.getTargetElement(t.appendedTo);f.appendChild(u)})}setScriptAttributes(n,t){n.type="text/javascript";n.defer=t.isDeferred||!1;n.async=t.isAsync||!1;n.id=t.id||""}getTargetElement(n){return n==="head"?this._targetElement:document.body}isScriptLoaded(n,t){const i=n+(t||"");return this._loadedScripts.has(i)}logOutResult(n){console.info(`[ScriptLoader]: ${n}`)}logOutError(n){console.error(`[ScriptLoader]: ${n}`)}}