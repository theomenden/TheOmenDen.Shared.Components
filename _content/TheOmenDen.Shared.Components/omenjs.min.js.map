{"version":3,"file":"omenjs.min.js","mappings":"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","sources":["webpack:///./dynamicScriptLoader.ts","webpack:///./reCAPTCHAInterop.ts","webpack:///webpack/bootstrap","webpack:///./index.ts"],"sourcesContent":["import { IScriptLoaderOptions } from \"./IScriptLoaderOptions\";\n\ninterface IScriptLoaderContract {\n    /**\n     * Loads a script from a given url\n     *\n     * @param {string} url - The url of the script to load\n     * @param {IScriptLoaderOptions} options - Options for the script loader\n     * @returns {Promise<void>}\n     *\n     * @throws {Error}\n     * Thrown when the script fails to load after the max retries\n     *\n     * @public \n     */\n    loadScript: (url: string, options: IScriptLoaderOptions) => Promise<void>;\n}\n\n/**\n A simple utility that can be used to load a script tag into your application.\n */\nexport class ScriptLoader implements IScriptLoaderContract {\n    private _loadedScripts: Set<string> = new Set<string>();\n    private _targetElement: HTMLElement;\n\n    constructor() {\n        this._targetElement = document.head; // Default to head\n    }\n\n    /**\n     * Loads a script from a given url\n     *\n     * @param {string} url - The url of the script to load\n     * @param {IScriptLoaderOptions} options - Options for the script loader\n     * @returns {Promise<void>}\n     *\n     * @throws {Error}\n     * Thrown when the script fails to load after the max retries\n     *\n     * @public \n     */\n    async loadScript(url: string, options: IScriptLoaderOptions = {}): Promise<void> {\n        const maxRetries = options.maxRetries || 3;\n        const retryDelay = options.retryInterval || 25;\n\n        if (this.isScriptLoaded(url, options.id)) {\n            this.logOutResult(\"Script Already Loaded\");\n            return;\n        }\n\n        let retries = 0;\n\n        while (retries <= maxRetries) {\n            try {\n                await this.loadScriptAttempt(url, options);\n                return;\n            } catch (error) {\n                if (retries >= maxRetries) {\n                    this.logOutError(\"Script Failed To Load after retries\");\n                    throw error;\n                }\n\n                retries++;\n                this.logOutError(`Script Failed To Load. Retrying... (${retries}/${maxRetries})`);\n                await new Promise((resolve) => setTimeout(resolve, retryDelay));\n            }\n        }\n    }\n\n    private async loadScriptAttempt(url: string, options: IScriptLoaderOptions): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            const script = document.createElement(\"script\") as HTMLScriptElement;\n            script.src = url;\n            script.onload = () => {\n                this._loadedScripts.add(url + (options.id || \"\"));\n                this.logOutResult(\"Script Loaded successfully\");\n                resolve();\n            };\n            script.onerror = () => {\n                reject(new Error(\"Script failed to load\"));\n            };\n\n            this.setScriptAttributes(script, options);\n\n            const targetElement = this.getTargetElement(options.appendedTo);\n            targetElement.appendChild(script);\n        });\n    }\n\n\n    private setScriptAttributes(script: HTMLScriptElement, options: IScriptLoaderOptions): void {\n        script.type = \"text/javascript\";\n        script.defer = options.isDeferred || false;\n        script.async = options.isAsync || false;\n        script.id = options.id || \"\";\n    }\n\n    private getTargetElement(appendTo?: \"head\" | \"body\"): HTMLElement {\n        return appendTo === \"head\" ? this._targetElement : document.body;\n    }\n\n    private isScriptLoaded(url: string, id?: string): boolean {\n        const scriptKey = url + (id || \"\");\n        return this._loadedScripts.has(scriptKey);\n    }\n\n    private logOutResult(message: string): void {\n        console.info(`[ScriptLoader]: ${message}`);\n    }\n\n    private logOutError(error: string): void {\n        console.error(`[ScriptLoader]: ${error}`);\n    }\n}","import { ICaptchaRenderParameters } from './ICaptchaRenderParameters';\nimport { IScriptLoaderOptions } from './IScriptLoaderOptions';\nimport { ScriptLoader } from './dynamicScriptLoader';\nimport { DotNet } from \"@microsoft/dotnet-js-interop\";\n\ndeclare const grecaptcha: ReCaptchaV2.ReCaptcha;\n\n/**\n * A simple utility that can be used to load a ReCaptcha script tag into your application.\n * This class also provides methods to execute and render a captcha.\n */\nexport class CaptchaLoader {\n    private readonly _defaultScriptLoadingOptions: IScriptLoaderOptions = {\n        isAsync: true,\n        isDeferred: true,\n        appendedTo: \"head\",\n        maxRetries: 3,\n        retryInterval: 100,\n        id: \"captchaLoader\"\n    };\n\n    private readonly _captchaUrls: Map<string, string> = new Map<string, string>([\n        [\"google\", \"https://www.google.com/recaptcha/api.js\"],\n        [\"googleEnterprise\", \"https://www.google.com/recaptcha/enterprise.js\"],\n        [\"recaptcha\", \"https://www.recaptcha.net/recaptcha/api.js\"],\n        [\"recaptchaEnterprise\", \"https://www.recaptcha.net/recaptcha/enterprise.js\"]]);\n\n    /**\n     * Loads the captcha script with the provided site key, and an optional override for the default loading parameters.\n     * @param siteKey - The provided site key\n     * @param dotNetObjRef - A reference to the dotnet object that will be used to invoke the callback methods\n     * @param [useRecaptchaNet=false] - Whether to use the recaptchanet endpoint, default is false\n     * @param [useEnterprise=false] - whether to use the enterprise library version, default is false\n     * @param loadingOptions - Optional parameters to override the default loading parameters\n     */\n    async loadAsync(siteKey: string, dotNetObjRef: DotNet.DotNetObject, useRecaptchaNet: boolean = false, useEnterprise: boolean = false, loadingOptions?: IScriptLoaderOptions): Promise<void> {\n        try {\n            const scriptLoader = new ScriptLoader();\n\n            const pathKey = this.determineCaptchaApi(useEnterprise, useRecaptchaNet);\n\n            const url = `${this._captchaUrls.get(pathKey)}?render=${siteKey}`;\n\n            loadingOptions = { ...this._defaultScriptLoadingOptions, ...loadingOptions };\n\n            await scriptLoader.loadScript(url, loadingOptions);\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"try again later\";\n            console.error(`An error occurred while loading captcha.`);\n            await dotNetObjRef.invokeMethodAsync(\"OnCaptchaError\", errorMessage);\n        }\n    }\n\n    /**\n     * Allows the caller to execute a captcha, with an optional action parameter.\n     * The default action is \"homepage\"\n     * @param dotNetObjRef - A reference to the dotnet object that will be used to invoke the callback methods\n     * @param siteKey - The provided site key\n     * @param action - Optional action parameter\n     */\n    async executeAsync(dotNetObjRef: DotNet.DotNetObject, siteKey: string, action?: string): Promise<void> {\n        try {\n            const response = await grecaptcha.execute(siteKey, { action: action || \"homepage\" });\n            await dotNetObjRef.invokeMethodAsync(\"OnCaptchaExecuted\", response);\n\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"try again later\";\n            console.error(`An error occurred while executing captcha.`);\n            await dotNetObjRef.invokeMethodAsync(\"OnCaptchaError\", errorMessage);\n        }\n    }\n\n    /**\n     * Allows the caller to render a captcha in a specific container, with the option to override the default parameters.\n     * A default container is used if none is specified - \"recaptcha_container\"\n     * @param siteKey - The provided site key\n     * @param dotNetObjRef - A reference to the dotnet object that will be used to invoke the callback methods\n     * @param renderParameters - Optional parameters to override the default rendering parameters\n     */\n    async renderAsync(siteKey: string, dotNetObjRef: DotNet.DotNetObject, renderParameters?: ICaptchaRenderParameters): Promise<void> {\n\n        const transformedParameters: ReCaptchaV2.Parameters = {\n            sitekey: siteKey,\n            theme: renderParameters?.theme || \"dark\",\n            size: renderParameters?.size || \"compact\",\n            tabindex: renderParameters?.tabindex || 0,\n            badge: renderParameters?.badge || \"bottomright\",\n            callback: async (response) => {\n                await dotNetObjRef.invokeMethodAsync(\"OnCaptchaResolved\", response);\n            },\n            \"expired-callback\": async () => {\n                await dotNetObjRef.invokeMethodAsync(\"OnCaptchaExpired\");\n            },\n            \"error-callback\": async () => {\n                await dotNetObjRef.invokeMethodAsync(\"OnCaptchaError\");\n            }\n        };\n\n        let widgetId = 0;\n\n        grecaptcha.ready(() => {\n            const actualizedContainer = renderParameters?.container || \"recaptcha_container\";\n\n            widgetId = grecaptcha.render(actualizedContainer, transformedParameters);\n        });\n\n        await dotNetObjRef.invokeMethodAsync(\"OnCaptchaRendered\", widgetId);\n    }\n\n    /**\n     * Resets the Captcha Challenge\n     * @param dotNetObjRef the dotnet object reference\n     * @param widgetId the widget id to reset - OPTIONAL\n     */\n    async resetAsync(widgetId?: number): Promise<void> {\n        grecaptcha.reset(widgetId);\n    }\n\n    private determineCaptchaApi(useEnterprise: boolean, useRecaptchaNet: boolean): string {\n        if (useEnterprise && useRecaptchaNet) {\n            return \"recaptchaEnterprise\";\n        }\n\n        if (useEnterprise) {\n            return \"googleEnterprise\";\n        }\n\n        if (useRecaptchaNet) {\n            return \"recaptcha\";\n        }\n\n        return \"google\";\n    }\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { ScriptLoader } from \"./dynamicScriptLoader\";\nimport { CaptchaLoader } from \"./reCAPTCHAInterop\";\n\ndeclare global {\n    interface Window {\n        scriptLoader: ScriptLoader;\n        captchaLoader: CaptchaLoader;\n    }\n}\n\n(window as any).scriptLoader = new ScriptLoader();\n(window as any).reCaptchaInterop = new CaptchaLoader();"],"names":["_loadedScripts","Set","_targetElement","constructor","this","document","head","async","url","options","maxRetries","retryDelay","retryInterval","isScriptLoaded","id","logOutResult","retries","loadScriptAttempt","error","logOutError","Promise","resolve","setTimeout","reject","script","createElement","src","onload","add","onerror","Error","setScriptAttributes","getTargetElement","appendedTo","appendChild","type","defer","isDeferred","isAsync","appendTo","body","scriptKey","has","message","console","info","_defaultScriptLoadingOptions","_captchaUrls","Map","siteKey","dotNetObjRef","useRecaptchaNet","useEnterprise","loadingOptions","scriptLoader","ScriptLoader","pathKey","determineCaptchaApi","get","loadScript","errorMessage","invokeMethodAsync","action","response","grecaptcha","execute","renderParameters","transformedParameters","sitekey","theme","size","tabindex","badge","callback","widgetId","ready","actualizedContainer","container","render","reset","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","window","reCaptchaInterop","CaptchaLoader"],"sourceRoot":""}